#Project 1

def mean(data):
  """
  Calculates the average of a list of numbers.

  Args:
      data: A list of numbers.

  Returns:
      The average of the numbers in the list, or 0 if the list is empty.
  """
  if not data:
    return 0
  return sum(data) / len(data)

def median(data):
  """
  Calculates the median of a list of numbers.

  Args:
      data: A list of numbers.

  Returns:
      The median of the numbers in the list, or 0 if the list is empty.
  """
  if not data:
    return 0
  sorted_data = sorted(data)
  midpoint = len(sorted_data) // 2
  if len(sorted_data) % 2 == 0:
    return (sorted_data[midpoint - 1] + sorted_data[midpoint]) / 2
  else:
    return sorted_data[midpoint]

def mode(data):
  """
  Calculates the mode of a list of numbers.

  Args:
      data: A list of numbers.

  Returns:
      The most frequent number in the list, or 0 if the list is empty 
      or there is no single most frequent number.
  """
  if not data:
    return 0
  counts = {}
  for num in data:
    counts[num] = counts.get(num, 0) + 1
  max_count = max(counts.values(), default=0)
  modes = [num for num, count in counts.items() if count == max_count]
  return modes[0] if len(modes) == 1 else 0

def main():
  """
  Tests the mean, median, and mode functions with a sample list.
  """
  data = [1, 3, 5, 7, 2, 3, 3]
  print(f"Mean: {mean(data)}")
  print(f"Median: {median(data)}")
  print(f"Mode: {mode(data)}")

if __name__ == "__main__":
  main()
-------------------------------------------------------------------------
#Project 2

def main():
  """Prompts user for a filename, reads the lines, and allows navigation."""
  filename = input("Enter the filename: ")
  try:
    with open(filename, 'r') as file:
      lines = file.readlines()
  except FileNotFoundError:
    print(f"Error: File '{filename}' not found.")
    return

  num_lines = len(lines)

  while True:
    print(f"\nThe file has {num_lines} lines.")
    line_number = int(input("Enter a line number [0 to quit]: "))
    if line_number == 0:
      break

    if 0 < line_number <= num_lines:
      print(f"Line {line_number}: {lines[line_number - 1].strip()}")  # Adjust for 0-based indexing
    else:
      print(f"Error: Invalid line number. Please enter a number between 1 and {num_lines}.")

if __name__ == "__main__":
  main()
